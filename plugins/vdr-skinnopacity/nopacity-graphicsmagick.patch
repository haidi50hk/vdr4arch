commit 654881fc98327bf115a3f4ca4a796d7a48399fa9
Author: Manuel Reimer <manuel.reimer@gmx.de>
Date:   Mon Nov 11 20:41:42 2013 +0100

    Made skin compatible with GraphicsMagick

diff --git a/imagecache.c b/imagecache.c
index 5b6cbcf..9fb1690 100644
--- a/imagecache.c
+++ b/imagecache.c
@@ -324,12 +324,9 @@ bool cImageCache::LoadIcon(eCacheType type, std::string name) {
 }
 
 void cImageCache::InsertIntoIconCache(eCacheType type, std::string name, int width, int height, bool preserveAspect) {
-    if (preserveAspect) {
-        buffer.sample(Geometry(width, height));
-    } else {
-        cString geometry = cString::sprintf("%dx%d!", width, height);
-        buffer.resize(Geometry(*geometry));
-    }
+    Geometry size(width, height);
+    size.aspect(!preserveAspect);
+    buffer.sample(size);
     cImage *image = CreateImage();
     if (type == ctMenuIcon)
         menuIconCache.insert(std::pair<std::string, cImage*>(name, image));
@@ -692,8 +689,9 @@ void cImageCache::CreateSkinElementsGraphics(void) {
 
 void cImageCache::InsertIntoSkinElementCache(eSkinElementType type, int width, int height) {
     if (width>0 && height>0) {
-        cString geometry = cString::sprintf("%dx%d!", width, height);
-        buffer.resize(Geometry(*geometry));
+        Geometry size(width, height);
+        size.aspect(true);
+        buffer.sample(size);
     }
     cImage *image = CreateImage();
     skinElementCache.insert(std::pair<eSkinElementType, cImage*>(type, image));
@@ -735,4 +733,4 @@ void cImageCache::Clear(void) {
         delete img;
     }
     logoTimerCache.clear();
-}
\ No newline at end of file
+}
diff --git a/imagemagickwrapper.c b/imagemagickwrapper.c
index c22faf4..7cdf980 100644
--- a/imagemagickwrapper.c
+++ b/imagemagickwrapper.c
@@ -88,27 +88,36 @@ Color cImageMagickWrapper::Argb2Color(tColor col) {
     return color;
 }
 
-void cImageMagickWrapper::CreateBackground(tColor back, tColor blend, int width, int height, bool mirror) {
+void cImageMagickWrapper::CreateGradient(tColor back, tColor blend, int width, int height, double wfactor, double hfactor) {
     Color Back = Argb2Color(back);
     Color Blend = Argb2Color(blend);
-    Image tmp(Geometry(width, height), Blend);
-    double arguments[9] = {0.0,(double)height,0.0,-1*(double)width,0.0,0.0,1.5*(double)width,0.0,1.0};
-    tmp.sparseColor(MatteChannel, BarycentricColorInterpolate, 9, arguments);
-    Image tmp2(Geometry(width, height), Back);
-    tmp.composite(tmp2, 0, 0, OverlayCompositeOp);
-    if (mirror)
-        tmp.flop();
-    buffer = tmp;
+    int maxw = MaxRGB * wfactor;
+    int maxh = MaxRGB * hfactor;
+
+    Image imgblend(Geometry(width, height), Blend);
+    imgblend.modifyImage();
+    imgblend.type(TrueColorMatteType);
+    PixelPacket *pixels = imgblend.getPixels(0, 0, width, height);
+    for (int x = 0; x < width; x++) {
+        for (int y = 0; y < height; y++) {
+            PixelPacket *pixel = pixels + y * width + x;
+            int opacity = (maxw / width * x + maxh - maxh / height * y) / 2;
+            pixel->opacity = (opacity <= MaxRGB) ? opacity : MaxRGB;
+        }
+    }
+    imgblend.syncPixels();
+
+    Image imgback(Geometry(width, height), Back);
+    imgback.composite(imgblend, 0, 0, OverCompositeOp);
+
+    buffer = imgback;
 }
 
+void cImageMagickWrapper::CreateBackground(tColor back, tColor blend, int width, int height, bool mirror) {
+    CreateGradient(back, blend, width, height, 0.8, 0.8);
+    if (mirror)
+        buffer.flop();
+}
 void cImageMagickWrapper::CreateBackgroundReverse(tColor back, tColor blend, int width, int height) {
-    Color Back = Argb2Color(back);
-    Color Blend = Argb2Color(blend);
-    Image tmp(Geometry(width, height), Blend);
-    double arguments[9] = {0.0,(double)height,0.0,-0.5*(double)width,0.0,0.0,(double)width,0.0,1.0};
-    tmp.sparseColor(MatteChannel, BarycentricColorInterpolate, 9, arguments);
-    Image tmp2(Geometry(width, height), Back);
-    tmp.composite(tmp2, 0, 0, OverlayCompositeOp);
-    buffer = tmp;
+    CreateGradient(back, blend, width, height, 1.3, 0.7);
 }
-
diff --git a/imagemagickwrapper.h b/imagemagickwrapper.h
index 1c38074..a5cc482 100644
--- a/imagemagickwrapper.h
+++ b/imagemagickwrapper.h
@@ -9,6 +9,8 @@
 using namespace Magick;
 
 class cImageMagickWrapper {
+private:
+    void CreateGradient(tColor back, tColor blend, int width, int height, double wfactor, double hfactor);
 public:
     cImageMagickWrapper();
     ~cImageMagickWrapper();
